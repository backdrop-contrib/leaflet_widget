<?php

/**
 * Implements hook_field_widget_info().
 */
function geofield_leaflet_field_widget_info() {
  $widgets = array();

  $widgets['geofield_leaflet_widget'] = array(
    'label' => 'Leaflet.widget',
    'description' => 'Provides a map powered by Leaflet and Leaflet.widget.',
    'field types' => array('geofield'),
    'settings' => array(
      'map' => array(
        'base_url' => 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
        'center' => array(
          'lat' => 49.26,
          'lng' => -123.11
        ),
        'zoom' => 10,
      ),
    ),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      'default value' => FIELD_BEHAVIOR_NONE,
    ),
  );

  return $widgets;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function geofield_leaflet_field_widget_settings_form($field, $instance) {
  $form = array();
  $settings = $instance['widget']['settings'];
  error_log(print_r($settings, 1), 0);

  switch ($instance['widget']['type']) {
    case 'geofield_leaflet_widget':
      $form['map'] = array(
        '#type' => 'fieldset',
        '#title' => 'Default map settings',
      );
      $form['map']['base_url'] = array(
        '#type' => 'select',
        '#title' => 'Leaflet.draw widget settings',
        '#default_value' => $settings['map']['base_url'],
        // TODO: Expose this for extension.
        '#options' => array(
          'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png' => 'OSM',
        ),
      );
      $form['map']['center'] = array('#type' => 'fieldset', '#title' => 'Default map center');
      $form['map']['center']['lat'] = array(
        '#type' => 'textfield', // 'hidden',
        '#title' => 'Latitude',
        '#default_value' => $settings['map']['center']['lat'],
        '#required' => TRUE,
      );
      $form['map']['center']['lng'] = array(
        '#type' => 'textfield', // 'hidden',
        '#title' => 'Longtitude',
        '#default_value' => $settings['map']['center']['lng'],
        '#required' => TRUE,
      );
      $form['map']['zoom'] = array(
        '#type' => 'textfield', // 'hidden',
        '#title' => 'Default zoom level',
        '#default_value' => $settings['map']['zoom'],
        '#required' => TRUE,
      );
      break;
  }

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function geofield_leaflet_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $settings = $instance['widget']['settings'];

  $widget = geofield_get_base_element($element, $items, $delta);
  $widget['#type'] = 'fieldset';

  switch ($instance['widget']['type']) {
    case 'geofield_leaflet_widget':
      $id = 'geofield-leaflet_' . str_replace('_', '-', $instance['field_name']);
      $class = 'geofield-leaflet-widget';
      $style = 'height: 300px;';

      $settings['dest'] = "$id-input";

      // Provide container markup for map form element.
      $container = "<div id=\"$id\" class=\"$class\" style=\"$style\"></div>";
      $widget['geofield_leaflet'] = array('#markup' => $container);

      // Overriding Geofield's validation handler.
      $widget['#element_validate'] = array('geofield_leaflet_widget_validate');

      // Tell Geofield to expect GeoJSON instead of WKT.
      $widget['input_format']['#value'] = 'geojson';

      // Prepare existing field values to be rendered in widget.
      $collection = geofield_leaflet_widget_prepare_items($items);

      // Set default value incase form is submitted without javascript enabled.
      $widget['wkt']['#default_value'] = drupal_json_encode($collection);
      $widget['wkt']['#attributes']['id'] = $settings['dest'];

      // Include javascript.
      $widget['#attached']['library'][] = array('geofield_leaflet', 'widget');
      // Settings and geo-data are passed to the widget keyed by field id.
      $widget['#attached']['js'][] = array(
        'type' => 'setting',
        'data' => array(
          'geofield_leaflet_widget' => array(
            $id =>  array(
              'settings' => $settings,
              'geojson' => $collection,
            ),
          ),
        ),
      );

      break;
  }

  return $widget;
}

function geofield_leaflet_widget_prepare_items($items) {
  $features = array();
  foreach ($items as $item) {
    if (isset($item['wkt'])) {
      $features[] = geofield_leaflet_geojson_feature($item['wkt']);
    }
  }
  return geofield_leaflet_geojson_feature_collection($features);
}

function geofield_leaflet_widget_validate($element, &$form_state) {
  $geophp = geophp_load();
  if (!$geophp) return FALSE;

  $geom = geoPHP::load($element['wkt']['#value'], 'json');
  $type = $geom->geometryType();
  $items = ($type === 'GeometryCollection') ? $geom->getComponents() : array($geom);

  $results = array();
  foreach ($items as $item) {
    $result = array('wkt' => $item->out('wkt'));
    geofield_compute_values($result, 'wkt');
    $results[] = $result;
  }

  form_set_value($element, $results, $form_state);
}

/**
 * Implements hook_library().
 */
function geofield_leaflet_library() {
  $path = drupal_get_path('module', 'geofield_leaflet');
  $leaflet_widget_path = libraries_get_path('Leaflet.widget');

  $libraries = array();

  $libraries['widget'] = array(
    'title' => 'Widget behavior',
    'version' => '1.x',
    'js' => array(
      "$path/js/widget.js" => array(),
    ),
    'dependencies' => array(
      array('geofield_leaflet', 'Leaflet.widget'),
    ),
  );

  $libraries['Leaflet.widget'] = array(
    'title' => 'Leaflet.widget',
    'version' => '1.x',
    'css' => array(
      "$leaflet_widget_path/dist/leaflet.widget.min.css" => array(),
    ),
    'js' => array(
      "$leaflet_widget_path/dist/leaflet.widget.js" => array(),
    ),
    'dependencies' => array(
      array('geofield_leaflet', 'Leaflet.draw'),
    ),
  );

  $libraries['Leaflet.draw'] = array(
    'title' => 'Leaflet.draw',
    'version' => '1.x',
    'css' => array(
      "$leaflet_widget_path/lib/Leaflet.draw/leaflet.draw.css" => array(),
    ),
    'js' => array(
      "$leaflet_widget_path/lib/Leaflet.draw/leaflet.draw-src.js" => array(),
    ),
    'dependencies' => array(
      array('leaflet', 'leaflet'), // TODO: Make this configurable.
    ),
  );

  return $libraries;
}

function geofield_leaflet_geojson_feature_collection($features, $properties = array()) {
  if (!is_array($features)) {
    $features = array($features);
  }

  return array(
    'type' => 'FeatureCollection',
    'features' => $features,
  );
}

function geofield_leaflet_geojson_feature($wkt, $properties = array()) {
  $geophp = geophp_load();
  if (!$geophp) return FALSE;

  $geometry = geoPHP::load($wkt, 'wkt');
  return array(
    'type' => 'Feature',
    'geometry' => json_decode($geometry->out('json')),
    'properties' => $properties,
  );
}
