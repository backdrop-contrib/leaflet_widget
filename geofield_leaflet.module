<?php

/**
 * Implements hook_field_widget_info().
 */
function geofield_leaflet_field_widget_info() {
  $widgets = array();

  $widgets['geofield_leaflet_draw'] = array(
    'label' => 'Leaflet.draw',
    'description' => 'Provides a map powered by Leaflet and Leaflet.draw.',
    'field types' => array('geofield'),
    'settings' => array(
      'map' => '',
    ),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      'default value' => FIELD_BEHAVIOR_NONE,
    ),
  );

  return $widgets;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function geofield_leaflet_field_widget_settings_form($field, $instance) {
  $form = array();

  switch ($instance['widget']['type']) {
    case 'geofield_leaflet_draw':
      $form['map'] = array(
        '#type' => 'select',
        '#title' => 'Leaflet.draw widget settings',
        '#default_value' => '', // TODO: Check $field & $instance for the 'settings' value.
        '#options' => array(), // TODO: Look for leaflet maps.
      );
      break;
  }

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function geofield_leaflet_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $widget = $element;

  switch ($instance['widget']['type']) {
    case 'geofield_leaflet_draw':
      $id = 'geofield-leaflet_' . str_replace('_', '-', $instance['field_name']);
      $class = 'geofield-leaflet-widget';
      $style = 'height: 300px;';
      $container = "<div id=\"$id\" class=\"$class\" style=\"$style\"></div>";

      $widget['#attached']['library'][] = array('geofield_leaflet', 'widget');
      $widget['#type'] = 'fieldset';

      $widget['geofield_leaflet'] = array('#markup' => $container);
      $widget['geofield_leaflet_input'] = array(
        '#type' => 'hidden',
        '#attributes' => array(
          'id' => "$id-input",
        ),
      );

      // Convert data to geojson for native handling client-side.
      $features = array();
      foreach ($items as $item) {
        if (isset($item['wkt'])) {
          $features[] = geofield_leaflet_geojson_feature($item['wkt']);
        }
      }

      $widget['#attached']['js'][] = array(
        'type' => 'setting',
        'data' => array(
          'geofield_leaflet_widget_data' => array(
            $id => geofield_leaflet_geojson_feature_collection($features),
          ),
        ),
      );

      break;
  }

  return $widget;
}

/**
 * Implements hook_library().
 */
function geofield_leaflet_library() {
  $path = drupal_get_path('module', 'geofield_leaflet');
  $leaflet_draw_path = libraries_get_path('Leaflet.draw');

  $libraries = array();

  $libraries['Leaflet.draw'] = array(
    'title' => 'Leaflet.draw',
    'version' => '1.x',
    'css' => array(
      "$leaflet_draw_path/dist/leaflet.draw.css" => array(),
    ),
    'js' => array(
      "$leaflet_draw_path/dist/leaflet.draw-src.js" => array(),
    ),
    'dependencies' => array(
      array('leaflet', 'leaflet'), // TODO: Make this configurable.
    ),
  );

  $libraries['widget'] = array(
    'title' => 'Geofield leaflet widget',
    'version' => '7.x-1.x',
    'js' => array(
      "$path/js/widget.js" => array(),
    ),
    'dependencies' => array(
      array('geofield_leaflet', 'Leaflet.draw'),
    ),
  );

  return $libraries;
}

function geofield_leaflet_geojson_feature_collection($features, $properties = array()) {
  if (!is_array($features)) {
    $features = array($features);
  }

  return array(
    'type' => 'FeatureCollection',
    'features' => $features,
  );
}

function geofield_leaflet_geojson_feature($wkt, $properties = array()) {
  $geophp = geophp_load();
  if (!$geophp) return FALSE;

  $geometry = geoPHP::load($wkt, 'wkt');
  return array(
    'type' => 'Feature',
    'geometry' => json_decode($geometry->out('json')),
    'properties' => $properties,
  );
}
